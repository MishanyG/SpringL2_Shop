package com.geekbrains;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;


@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}

// TODO:
//-XX:MaxHeapFreeRatio - устанавливает максимальный процент свободного пространства кучи после GC
//        (Garbage Collecting, сборки мусора), чтобы избежать сжатия.

//-XX:MinHeapFreeRatio - устанавливает минимальный процент свободного пространства кучи после GC,
//        чтобы избежать расширения; для мониторинга использования кучи вы можете использовать JConsole.

//Ранее параметры JVM определяли размер кучи памяти, но -XX:PermSize - для определения размера
// пространства PermGen, в котором сохраняются пул строк и метаданные класса. Этот параметр особенно
// эффективен для веб-сервера, такого как Tomcat, который часто загружает классы веб-приложения во время развертывания.

//-verbose:gc - регистрирует, запуски сборщика мусора и сколько времени они занимают.
//-XX:+PrintGCDetails - включает в себя данные из -verbose:gc, но также добавляет информацию о размере
// нового поколения и более точных временных параметрах.
//-XX:-PrintGCTimeStamps - печатать метки времени при сборке мусора.
//Эти параметры JVM используются для включения ведения журнала сбора мусора, что очень эффективно
// для чувствительной к задержке операции. Обычно работа идет в системах, где ведется поиск задержек
// в микросекундах, но большая сборка мусора может длиться несколько миллисекунд.
//Эта удобная опция подскажет вам важную статистику GC. Станет известно, будет ли это большая или
// небольшая сборка мусора, какой тип сборщика мусора применяется, как часто восстанавливается
// память, сколько времени он занимал и т.д.

//Если мы хотим перезапустить сервер сразу после возникновения нехватки памяти,
// мы можем установить этот параметр:
//XX:OnOutOfMemoryError="shutdown -r"

//Говоря о Java Classpath а затем -Xbootclasspath определяет записи classpath, которые мы хотим
// загрузить без проверки. JVM проверяет все классы, которые она загружает, чтобы убедиться, что она
// не пытается разыменовать объект с помощью int, выталкивает дополнительные записи из стека
// или выталкивает слишком много, и так далее.

//Java профилирование - это процесс мониторинга различных параметров уровней JVM, таких как
// выполнение методов, выполнение потоков, сборка мусора и создание объектов. Java профилирование
// обеспечивает более точное представление о выполнении целевого приложения и использовании его ресурсов.
//-Xprof
//-Xrunhprof